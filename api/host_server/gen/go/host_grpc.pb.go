// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HostManagementClient is the client API for HostManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostManagementClient interface {
	FetchAllHost(ctx context.Context, in *RequestFetchAllHost, opts ...grpc.CallOption) (*ResponseFetchAllHost, error)
	UpdateHost(ctx context.Context, in *RequestUpdateHost, opts ...grpc.CallOption) (*ResponseUpdateHost, error)
}

type hostManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewHostManagementClient(cc grpc.ClientConnInterface) HostManagementClient {
	return &hostManagementClient{cc}
}

func (c *hostManagementClient) FetchAllHost(ctx context.Context, in *RequestFetchAllHost, opts ...grpc.CallOption) (*ResponseFetchAllHost, error) {
	out := new(ResponseFetchAllHost)
	err := c.cc.Invoke(ctx, "/HostManagement/FetchAllHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostManagementClient) UpdateHost(ctx context.Context, in *RequestUpdateHost, opts ...grpc.CallOption) (*ResponseUpdateHost, error) {
	out := new(ResponseUpdateHost)
	err := c.cc.Invoke(ctx, "/HostManagement/UpdateHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostManagementServer is the server API for HostManagement service.
// All implementations must embed UnimplementedHostManagementServer
// for forward compatibility
type HostManagementServer interface {
	FetchAllHost(context.Context, *RequestFetchAllHost) (*ResponseFetchAllHost, error)
	UpdateHost(context.Context, *RequestUpdateHost) (*ResponseUpdateHost, error)
	mustEmbedUnimplementedHostManagementServer()
}

// UnimplementedHostManagementServer must be embedded to have forward compatible implementations.
type UnimplementedHostManagementServer struct {
}

func (UnimplementedHostManagementServer) FetchAllHost(context.Context, *RequestFetchAllHost) (*ResponseFetchAllHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllHost not implemented")
}
func (UnimplementedHostManagementServer) UpdateHost(context.Context, *RequestUpdateHost) (*ResponseUpdateHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHost not implemented")
}
func (UnimplementedHostManagementServer) mustEmbedUnimplementedHostManagementServer() {}

// UnsafeHostManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostManagementServer will
// result in compilation errors.
type UnsafeHostManagementServer interface {
	mustEmbedUnimplementedHostManagementServer()
}

func RegisterHostManagementServer(s grpc.ServiceRegistrar, srv HostManagementServer) {
	s.RegisterService(&HostManagement_ServiceDesc, srv)
}

func _HostManagement_FetchAllHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFetchAllHost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostManagementServer).FetchAllHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HostManagement/FetchAllHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostManagementServer).FetchAllHost(ctx, req.(*RequestFetchAllHost))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostManagement_UpdateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUpdateHost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostManagementServer).UpdateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HostManagement/UpdateHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostManagementServer).UpdateHost(ctx, req.(*RequestUpdateHost))
	}
	return interceptor(ctx, in, info, handler)
}

// HostManagement_ServiceDesc is the grpc.ServiceDesc for HostManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HostManagement",
	HandlerType: (*HostManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchAllHost",
			Handler:    _HostManagement_FetchAllHost_Handler,
		},
		{
			MethodName: "UpdateHost",
			Handler:    _HostManagement_UpdateHost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "host.proto",
}
