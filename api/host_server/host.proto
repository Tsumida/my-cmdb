syntax = "proto3";

option go_package = "github.com/Tsumida/my-cmdb/api/host-server";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "my-cmdb OpenAPI doc";
        version: "0.1";
        contact: {
            name: "Tsumida";
            // url: "https://github.com/bbengfort/notes";
            email: "tsumida@163.com";
        };
        //license: {
        //    name: "BSD 3-Clause License";
        //    url: "https://github.com/bbengfort/notes/LICENSE";
        //};
    };

    schemes: HTTP;
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
};

message RequestMeta{
    int64 trace_id = 1; 
}

message ResponseMeta{
    int64 trace_id = 1; 
    enum ErrCode{
        OK = 0; 
        InternalError = 1; 
        InvalidParameter = 2; 
    }
    ErrCode err_code = 2; 
    string err_hint = 3; 
}

message HostObject{
    string host_id = 1;
    string os_version = 2;
    string ip_addr = 3; 
    enum HostStatus{
        Unknown = 0; 
        Healthy = 1; 
        NotReady = 2; 
    }
    HostStatus status = 4; 

    reserved 6 to 9; 
}

message SearchResult{
    repeated HostObject hosts = 1;    
}

message RequestFetchAllHost{
    RequestMeta meta = 1;
}

message ResponseFetchAllHost{
    ResponseMeta meta = 1; 
    SearchResult result = 2; 
}

message RequestUpdateHost{
    RequestMeta meta = 1;
    HostObject host = 2; 
}

message ResponseUpdateHost{
    ResponseMeta meta = 1; 
    HostObject host = 2; 
}

service HostManagement{
    rpc FetchAllHost(RequestFetchAllHost) returns (ResponseFetchAllHost){
        option (google.api.http) = {
            get: "/host-server/v1/batch-host"
        };
    };
    rpc UpdateHost(RequestUpdateHost) returns (ResponseUpdateHost){
        option (google.api.http) = {
            post: "/host-server/v1/host"
            body: "*"
        };
    };
}